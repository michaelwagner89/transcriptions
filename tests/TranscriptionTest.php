<?php

namespace Tests;

use Laracasts\Transcriptions\Line;
use Laracasts\Transcriptions\Transcription;
use PHPUnit\Framework\TestCase;

class TranscriptionTest extends TestCase {

    private Transcription $transcription;

    #[\Override] protected function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->transcription = Transcription::load(__DIR__ .'/stubs/basic-example.vtt');
    }


    /** @test */
    public function it_loads_a_vtt_file_as_a_string(): void {
        $this->assertStringContainsString('00:00:03.210 --> 00:00:04.110', $this->transcription);
        $this->assertStringContainsString('example of a VTT file.', $this->transcription);
    }

    /** @test */
    public function it_can_convert_to_an_array_of_lines_objects() {
        $lines = $this->transcription->lines();
        $this->assertCount(2, $lines);
        $this->assertContainsOnlyInstancesOf(Line::class, $lines);
    }

    /** @test */
    public function it_discards_irrelevant_lines_from_the_vtt_file(): void {
        $this->assertStringNotContainsString('WEBVTT', $this->transcription);
        $this->assertCount(2, $this->transcription->lines());
    }

    /** @test */
    public function it_render_the_lines_to_html() {
        $expected = <<<EOT
            <a href="?time=00:03">Here is a</a>
            <a href="?time=00:04">example of a VTT file.</a>
            EOT;

        $this->assertEquals($expected, $this->transcription->lines()->asHtml());

    }

    /** @test */
    public function it_supports_array_access() {

        $lines = $this->transcription->lines();

        $this->assertInstanceOf(\ArrayAccess::class, $lines);
        $this->assertInstanceOf(Line::class, $lines[0]);
    }
}